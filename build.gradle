plugins {
    id 'com.diffplug.spotless' version '8.0.0' apply false
}

wrapper {
    gradleVersion = '8.12'
}

allprojects {
    group = 'de.topobyte'
    version = '1.4.1'
}

// leaving this here for reference on how to modify
// a single module version
configure(project(':osm4j-core')) {
    version = '1.4.1'
}

ext.libraries = [
    project(':osm4j-core'),
    project(':osm4j-edit'),
    project(':osm4j-extra'),
    project(':osm4j-geometry'),
    project(':osm4j-utils'),
    project(':osm4j-incubating'),
    project(':osm4j-pbf'),
    project(':osm4j-pbf-full-runtime'),
    project(':osm4j-replication'),
    project(':osm4j-tbo'),
    project(':osm4j-testing'),
    project(':osm4j-xml')
]

configure(libraries) {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
}

configure(subprojects.findAll {it !in libraries}) {
    apply plugin: 'java'
}

// Apply spotless to all projects except pbf-full-runtime. The plugin
// fails with this one as it pulls in the source from the other pbf module.
configure(subprojects.findAll {it.name != 'osm4j-pbf-full-runtime'}) {
    apply plugin: 'com.diffplug.spotless'

    spotless {
        java {
            eclipse('4.34').configFile("$project.rootDir/formatter.xml")
            removeUnusedImports()
        }
    }
}

// Special spotless configuration for the pbf module: do not touch
// the protobuf generated files.
configure(project(':osm4j-pbf')) {
    spotless {
        java {
            target = files("$project.projectDir/src/main/java", "$project.projectDir/src/test/java")
        }
    }
}

subprojects {
    task allDeps(type: DependencyReportTask) {}

    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'

    repositories {
        maven {
            url = 'https://mvn.topobyte.de'
        }
        maven {
            url = 'https://mvn.slimjars.com'
        }
        mavenCentral()
    }

    java {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        withSourcesJar()
    }

    def global = new File('info.pom');
    def local = new File(project.projectDir, 'info.pom');

    def pomInfo = new XmlSlurper().parse(global);
    def publish = !project.hasProperty('dontPublish')
    if (publish) {
        def pomInfoL = new XmlSlurper().parse(local);
        pomInfo.name = pomInfoL.name
        pomInfo.description = pomInfoL.description
    }

    if (publish) {
        publishing {
            publications {
                maven(MavenPublication) {
                    from components.java
                    pom {
                        name = "$pomInfo.name"
                        description = "$pomInfo.description"
                        url = "$pomInfo.url"
                        licenses {
                            license {
                                name = "$pomInfo.licenseName"
                                url = "$pomInfo.licenseUrl"
                                distribution = "$pomInfo.licenseDistribution"
                            }
                        }
                    }
                }
            }
        }
    }
}

subprojects {
    task showInterModuleDependencies {
        doLast {
            println "module '$project.name'"
            project.configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each {
                if (it.id instanceof org.gradle.internal.component.local.model.PublishArtifactLocalArtifactMetadata) {
                    def component = it.id.componentIdentifier
                    if (component instanceof org.gradle.api.internal.artifacts.DefaultProjectComponentIdentifier) {
                        def path = component.projectPath
                        def name = path.substring(path.lastIndexOf(':') + 1)
                        println "     â†’ '$name'"
                    }
                }
            }
        }
    }
}
